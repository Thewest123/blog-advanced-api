apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Program Files\kompose\kompose.exe convert
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: db
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: db
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Program Files\kompose\kompose.exe convert
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: db
    spec:
      containers:
      - env:
        - name: DJANGO_ALLOWED_HOSTS
          valueFrom:
            configMapKeyRef:
              key: DJANGO_ALLOWED_HOSTS
              name: env
        - name: DJANGO_DEBUG
          valueFrom:
            configMapKeyRef:
              key: DJANGO_DEBUG
              name: env
        - name: DJANGO_SECRET_KEY
          valueFrom:
            configMapKeyRef:
              key: DJANGO_SECRET_KEY
              name: env
        - name: GOOGLE_GEOCODING_API_KEY
          valueFrom:
            configMapKeyRef:
              key: GOOGLE_GEOCODING_API_KEY
              name: env
        - name: GOOGLE_GEOCODING_API_LINK
          valueFrom:
            configMapKeyRef:
              key: GOOGLE_GEOCODING_API_LINK
              name: env
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_DB
              name: env
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_PASSWORD
              name: env
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_USER
              name: env
        image: postgis/postgis:13-master
        imagePullPolicy: ""
        livenessProbe:
          exec:
            command:
            - pg_isready -U postgres -q -h db
          failureThreshold: 5
          periodSeconds: 5
          timeoutSeconds: 5
        name: db
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data/
          name: postgres-data
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data
status: {}
